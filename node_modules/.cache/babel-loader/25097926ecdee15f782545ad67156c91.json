{"ast":null,"code":"import{Jwt_token}from'../data/config';export var configureFakeBackend=function configureFakeBackend(){var users=[{email:'test@gmail.com',password:'test123'}];var realFetch=window.fetch;window.fetch=function(url,opts){var isLoggedIn=opts.headers['Authorization']===\"Bearer \".concat(Jwt_token);return new Promise(function(resolve,reject){// wrap in timeout to simulate server api call\nsetTimeout(function(){// authenticate - public\nif(url.endsWith('/users/authenticate')&&opts.method==='POST'){var params=opts.body;var user=users.find(function(x){return x.email===params.email&&x.password===params.password;});if(!user)return error('Username or password is incorrect');return ok(Jwt_token);}// get users - secure\nif(url.endsWith('/users')&&opts.method==='GET'){if(!isLoggedIn)return unauthorised();return ok(users);}// pass through any requests not handled above\nrealFetch(url,opts).then(function(response){return resolve(response);});// private helper functions\nfunction ok(body){resolve({ok:true,text:function text(){return Promise.resolve(JSON.stringify(body));}});}function unauthorised(){resolve({status:401,text:function text(){return Promise.resolve(JSON.stringify({message:'Unauthorised'}));}});}function error(message){resolve({status:400,text:function text(){return Promise.resolve(JSON.stringify({message:message}));}});}},500);});};};export function handleResponse(response){return response.text().then(function(text){var data=text&&JSON.parse(text);if(!response.ok){if([401,403].indexOf(response.status)!==-1){// auto logout if 401 Unauthorized or 403 Forbidden response returned from api\nlocalStorage.removeItem('token');localStorage.removeItem('profileURL');}}return data;});}export function authHeader(){// return authorization header with jwt token\nvar currentUser=localStorage.getItem('token');if(currentUser){return{Authorization:\"Bearer \".concat(currentUser)};}else{return{};}}","map":{"version":3,"sources":["/Users/tola/Downloads/Elites/elitesDemo/src/services/fack.backend.jsx"],"names":["Jwt_token","configureFakeBackend","users","email","password","realFetch","window","fetch","url","opts","isLoggedIn","headers","Promise","resolve","reject","setTimeout","endsWith","method","params","body","user","find","x","error","ok","unauthorised","then","response","text","JSON","stringify","status","message","handleResponse","data","parse","indexOf","localStorage","removeItem","authHeader","currentUser","getItem","Authorization"],"mappings":"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","sourcesContent":["import {Jwt_token} from '../data/config'\nexport const configureFakeBackend = () => {\n    let users = [{ email: 'test@gmail.com', password: 'test123'}];\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        const isLoggedIn = opts.headers['Authorization'] === `Bearer ${Jwt_token}`;\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n                // authenticate - public\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    const params = opts.body;\n                    const user = users.find(x => x.email === params.email && x.password === params.password);\n                    if (!user) return error('Username or password is incorrect');\n                    return ok(Jwt_token);\n                }\n\n                // get users - secure\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    if (!isLoggedIn) return unauthorised();\n                    return ok(users);\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n                // private helper functions\n\n                function ok(body) {\n                    resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) })\n                }\n\n                function unauthorised() {\n                    resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorised' })) })\n                }\n\n                function error(message) {\n                    \n                    resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) })\n                }\n            }, 500);\n        });\n    }\n}\n\nexport function handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if ([401, 403].indexOf(response.status) !== -1) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                localStorage.removeItem('token')\n                localStorage.removeItem('profileURL')\n            }\n        }\n        return data;\n    }); \n}\n\nexport function authHeader() {\n    // return authorization header with jwt token\n    const currentUser = localStorage.getItem('token')\n    if (currentUser) {\n        return { Authorization: `Bearer ${currentUser}` };\n    }else {\n        return {};\n    }\n}"]},"metadata":{},"sourceType":"module"}