{"ast":null,"code":"import _slicedToArray from\"/Users/tola/Downloads/Elites/elitesDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState,useEffect}from'react';import Breadcrumb from'../../layout/breadcrumb';import IconMarkUp from'./Icon-markup';import{Container,Row,Col,Card,CardHeader,CardBody}from'reactstrap';import axios from'axios';import{TypiconsIcons}from\"../../constant\";var Typeicon=function Typeicon(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),iTag=_useState4[0],setiTag=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),icon=_useState6[0],setIcon=_useState6[1];useEffect(function(){axios.get(\"\".concat(process.env.PUBLIC_URL,\"/api/typ-icon-data.json\")).then(function(res){return setData(res.data);});},[]);var getItag=function getItag(tag){setiTag({iTag:'<i className= \"'+tag+'\"></i>'});setIcon({icon:''+tag+' fa-2x'});};return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Breadcrumb,{parent:\"Icons\",title:\"Typicons Icon\"}),/*#__PURE__*/React.createElement(Container,{fluid:true},data.map(function(icons,index){return/*#__PURE__*/React.createElement(Row,{key:index},/*#__PURE__*/React.createElement(Col,{sm:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(\"h5\",{className:\"m-b-0\"},TypiconsIcons)),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,{className:\"icon-lists\"},icons.typ_icons.map(function(icon,i){return/*#__PURE__*/React.createElement(Col,{sm:\"6\",lg:\"4\",key:i,onClick:function onClick(e){return getItag(icon);}},/*#__PURE__*/React.createElement(\"i\",{className:\"\".concat(icon)}),\" \",icon);}))))));})),/*#__PURE__*/React.createElement(IconMarkUp,{itag:iTag,icons:icon}));};export default Typeicon;","map":{"version":3,"sources":["/Users/tola/Downloads/Elites/elitesDemo/src/components/icons/typicon.jsx"],"names":["React","Fragment","useState","useEffect","Breadcrumb","IconMarkUp","Container","Row","Col","Card","CardHeader","CardBody","axios","TypiconsIcons","Typeicon","props","data","setData","iTag","setiTag","icon","setIcon","get","process","env","PUBLIC_URL","then","res","getItag","tag","map","icons","index","typ_icons","i","e"],"mappings":"8JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAAyBC,QAAzB,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,CACA,OAAQC,SAAR,CAAkBC,GAAlB,CAAsBC,GAAtB,CAA0BC,IAA1B,CAA+BC,UAA/B,CAA0CC,QAA1C,KAAyD,YAAzD,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,aAAR,KAA4B,gBAA5B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAY,eAEFb,QAAQ,CAAC,EAAD,CAFN,wCAElBc,IAFkB,eAEbC,OAFa,8BAGDf,QAAQ,CAAC,EAAD,CAHP,yCAGlBgB,IAHkB,eAGZC,OAHY,8BAIDjB,QAAQ,CAAC,EAAD,CAJP,yCAIlBkB,IAJkB,eAIZC,OAJY,eAMzBlB,SAAS,CAAC,UAAM,CACdS,KAAK,CAACU,GAAN,WAAaC,OAAO,CAACC,GAAR,CAAYC,UAAzB,6BAA8DC,IAA9D,CAAmE,SAAAC,GAAG,QAAIV,CAAAA,OAAO,CAACU,GAAG,CAACX,IAAL,CAAX,EAAtE,EACD,CAFQ,CAEP,EAFO,CAAT,CAIA,GAAMY,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,GAAD,CAAS,CACrBV,OAAO,CAAC,CACJD,IAAI,CAAE,kBAAoBW,GAApB,CAA0B,QAD5B,CAAD,CAAP,CAGAR,OAAO,CAAC,CACJD,IAAI,CAAG,GAAKS,GAAL,CAAW,QADd,CAAD,CAAP,CAGH,CAPD,CAQA,mBACI,oBAAC,QAAD,mBACA,oBAAC,UAAD,EAAY,MAAM,CAAC,OAAnB,CAA2B,KAAK,CAAC,eAAjC,EADA,cAEC,oBAAC,SAAD,EAAW,KAAK,CAAE,IAAlB,EAEGb,IAAI,CAACc,GAAL,CAAS,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAC3B,mBACA,oBAAC,GAAD,EAAK,GAAG,CAAEA,KAAV,eACE,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,eACE,oBAAC,IAAD,mBACE,oBAAC,UAAD,mBACE,0BAAI,SAAS,CAAC,OAAd,EAAuBnB,aAAvB,CADF,CADF,cAIE,oBAAC,QAAD,mBACE,oBAAC,GAAD,EAAK,SAAS,CAAC,YAAf,EACCkB,KAAK,CAACE,SAAN,CAAgBH,GAAhB,CAAoB,SAACV,IAAD,CAAOc,CAAP,CAAa,CAC1B,mBACI,oBAAC,GAAD,EAAK,EAAE,CAAC,GAAR,CAAY,EAAE,CAAC,GAAf,CAAmB,GAAG,CAAEA,CAAxB,CAA4B,OAAO,CAAE,iBAACC,CAAD,QAAOP,CAAAA,OAAO,CAACR,IAAD,CAAd,EAArC,eACI,yBAAG,SAAS,WAAKA,IAAL,CAAZ,EADJ,KACmCA,IADnC,CADJ,CAKH,CANJ,CADD,CADF,CAJF,CADF,CADF,CADA,CAuBC,CAxBD,CAFH,CAFD,cA+BA,oBAAC,UAAD,EAAY,IAAI,CAAEF,IAAlB,CAAwB,KAAK,CAAEE,IAA/B,EA/BA,CADJ,CAmCH,CArDD,CAuDA,cAAeN,CAAAA,QAAf","sourcesContent":["import React, { Fragment,useState,useEffect } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb'\nimport IconMarkUp from './Icon-markup';\nimport {Container,Row,Col,Card,CardHeader,CardBody} from 'reactstrap'\nimport axios from 'axios'\nimport {TypiconsIcons} from \"../../constant\";\n\nconst Typeicon = (props) =>  {\n\n    const [data,setData] = useState([])\n    const [iTag, setiTag] = useState('');\n    const [icon, setIcon] = useState('');\n\n    useEffect(() => {\n      axios.get(`${process.env.PUBLIC_URL}/api/typ-icon-data.json`).then(res => setData(res.data))\n    },[])\n    \n    const getItag = (tag) => {\n        setiTag({\n            iTag: '<i className= \"' + tag + '\"></i>',\n        })\n        setIcon({\n            icon : '' + tag + ' fa-2x'\n        })\n    }\n    return (\n        <Fragment>\n        <Breadcrumb parent=\"Icons\" title=\"Typicons Icon\"/>\n         <Container fluid={true}>\n            {\n            data.map((icons, index) => {\n            return (\n            <Row key={index}>\n              <Col sm=\"12\">\n                <Card>\n                  <CardHeader>\n                    <h5 className=\"m-b-0\">{TypiconsIcons}</h5>\n                  </CardHeader>\n                  <CardBody>\n                    <Row className=\"icon-lists\">\n                    {icons.typ_icons.map((icon, i) => {\n                            return (\n                                <Col sm=\"6\" lg=\"4\" key={i}  onClick={(e) => getItag(icon)}>\n                                    <i className={`${icon}`}></i> {icon}\n                                </Col>\n                            )\n                        })\n                        }\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n             )\n            })\n         }\n        </Container> \n        <IconMarkUp itag={iTag} icons={icon} />   \n        </Fragment>\n    );\n}\n\nexport default Typeicon;"]},"metadata":{},"sourceType":"module"}