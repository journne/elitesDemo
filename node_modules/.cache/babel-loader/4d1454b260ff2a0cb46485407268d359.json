{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tola/Downloads/Elites/elitesDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/tola/Downloads/Elites/elitesDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/tola/Downloads/Elites/elitesDemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState,useRef,useCallback}from'react';import Breadcrumb from'../../layout/breadcrumb';import{Container,Card,CardHeader,CardBody}from'reactstrap';import ReactCrop from'react-image-crop';import{ImageCropper}from'../../constant';var Imagecropper=function Imagecropper(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),upImg=_useState2[0],setUpImg=_useState2[1];var imgRef=useRef(null);var _useState3=useState({unit:'%',width:30,aspect:16/9}),_useState4=_slicedToArray(_useState3,2),crop=_useState4[0],setCrop=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),previewUrl=_useState6[0],setPreviewUrl=_useState6[1];var onSelectFile=function onSelectFile(e){if(e.target.files&&e.target.files.length>0){var reader=new FileReader();reader.addEventListener('load',function(){return setUpImg(reader.result);});reader.readAsDataURL(e.target.files[0]);}};var onLoad=useCallback(function(img){imgRef.current=img;},[]);var makeClientCrop=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(imgRef.current&&crop.width&&crop.height){createCropPreview(imgRef.current,crop,'newFile.jpeg');}case 1:case\"end\":return _context.stop();}}},_callee);}));return function makeClientCrop(_x){return _ref.apply(this,arguments);};}();var createCropPreview=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image,crop,fileName){var canvas,scaleX,scaleY,ctx;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:canvas=document.createElement('canvas');scaleX=image.naturalWidth/image.width;scaleY=image.naturalHeight/image.height;canvas.width=crop.width;canvas.height=crop.height;ctx=canvas.getContext('2d');ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);return _context2.abrupt(\"return\",new Promise(function(resolve,reject){canvas.toBlob(function(blob){if(!blob){reject(new Error('Canvas is empty'));return;}blob.name=fileName;window.URL.revokeObjectURL(previewUrl);setPreviewUrl(window.URL.createObjectURL(blob));},'image/jpeg');}));case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function createCropPreview(_x2,_x3,_x4){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Breadcrumb,{parent:\"Bouns Ui\",title:\"Image Cropper\"}),/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(\"h5\",null,ImageCropper)),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"div\",{className:\"input-cropper\"},/*#__PURE__*/React.createElement(\"input\",{type:\"file\",onChange:onSelectFile})),/*#__PURE__*/React.createElement(ReactCrop,{src:upImg,crop:crop,onImageLoaded:onLoad,onChange:function onChange(c){return setCrop(c);},onComplete:makeClientCrop}),previewUrl&&/*#__PURE__*/React.createElement(\"img\",{alt:\"Crop preview\",src:previewUrl,style:{maxWidth:\"100%\"},className:\"crop-portion\"})))));};export default Imagecropper;","map":{"version":3,"sources":["/Users/tola/Downloads/Elites/elitesDemo/src/components/bonus_ui/imagecrop.jsx"],"names":["React","Fragment","useState","useRef","useCallback","Breadcrumb","Container","Card","CardHeader","CardBody","ReactCrop","ImageCropper","Imagecropper","props","upImg","setUpImg","imgRef","unit","width","aspect","crop","setCrop","previewUrl","setPreviewUrl","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","makeClientCrop","height","createCropPreview","image","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","Error","name","window","URL","revokeObjectURL","createObjectURL","c","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment,useState,useRef,useCallback } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb'\nimport {Container,Card,CardHeader,CardBody} from 'reactstrap'\nimport ReactCrop from 'react-image-crop';\nimport {ImageCropper} from '../../constant'\n\nconst Imagecropper = (props)  => {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n  const [previewUrl, setPreviewUrl] = useState();\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        setPreviewUrl(window.URL.createObjectURL(blob));\n      }, 'image/jpeg');\n    });\n  };\n\n  return (\n    <Fragment>\n    <Breadcrumb parent=\"Bouns Ui\" title=\"Image Cropper\"/>\n    <Container fluid={true}>\n      <Card>\n          <CardHeader>\n              <h5>{ImageCropper}</h5>\n          </CardHeader>\n          <CardBody>\n              <div className=\"input-cropper\">\n                  <input type=\"file\" onChange={onSelectFile} />\n              </div>\n              <ReactCrop\n                src={upImg}\n                crop={crop}\n                onImageLoaded={onLoad}\n                onChange={c => setCrop(c)}\n                onComplete={makeClientCrop}\n              />\n              {previewUrl && <img alt=\"Crop preview\" src={previewUrl}  style={{ maxWidth: \"100%\" }}  className=\"crop-portion\"  />}\n            </CardBody>\n        </Card>\n      </Container>\n      </Fragment>\n\n  );\n}\n\nexport default Imagecropper;"]},"metadata":{},"sourceType":"module"}